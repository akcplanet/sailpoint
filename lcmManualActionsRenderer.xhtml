<!DOCTYPE html PUBLIC
                "-//W3C//DTD XHTML 1.0 Transitional//EN"
                "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:c="http://java.sun.com/jstl/core" 
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:t="http://myfaces.apache.org/tomahawk"
      xmlns:sp="http://sailpoint.com/ui">
<body>

<ui:composition template="/appPage.xhtml">
<sp:loadBundle basename="sailpoint.web.messages.iiqMessages" var="msgs"/>
  <ui:define name="title">#{msgs.lcm_manual_actions_requested}</ui:define>
  <ui:define name="headerItems">
    <sp:script>
      <src>#{base.requestContextPath}/scripts/sailpoint/workItem.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/web/workitem/lcmWorkItem.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/Suggest.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PagingGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/grid/PropertyGrid.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/component/IdentityDetailPopup.js?#{debug.revision}</src>
      <src>#{base.requestContextPath}/scripts/sailpoint/misc.js?#{debug.revision}</src>
    </sp:script>

    <script type="text/javascript">
      <!--//--><![CDATA[//><!--
        helpKey = 'WORK_ITEM';
        Ext.onReady(function () {
            makeTableMulticolored(Ext.getDom('approvalItemsTable'), true, true, 'odd', 'even');		
      
		});
		
		
		<!--//-->  otherDatat for grid popu!--

		 		
	Ext.application({
       name : 'Attchement',
       launch : function() {
	   
        var storeatt = new Ext.data.ArrayStore({
		 storeId: 'myStore',    
            fields: [{
                name: 'id',
                type: 'string'
            }, {
                name: 'name',
                type: 'string'
            }, {
                name: 'applicationName',
                type: 'string'
            }, {
                name: 'displayableValue',
                type: 'string',
               // dateFormat: 'Y-m-d'
            }, {
                name: 'operation',
                type: 'string'
            }, {
                name: 'value',
                type: 'string'
            }, {
                name: 'attachments',
                type: 'auto',
            }, {
                name: 'accountName',
                type: 'string'
            }]
      });


    Ext.define('Attachments', {
    extend    : 'Ext.data.Model',
    fields  : [
        {name: 'id',        type: 'string'},
        {name: 'name',      type: 'string'},
        {name: 'description',  type: 'string'}
    ]
});

	   Ext.Ajax.request({
        url: SailPoint.getRelativeUrl('/ui/rest/identityRequests/#{workItem.object.identityRequestId}'),
        success: function(response){
         var respObj = Ext.decode(response.responseText);
          storeatt.loadData(respObj.items);
			  },
			  failure: function(response){
			    console.log(response);
			   
			  }, 
      });
	  
	  
	 <!--//-->  Datat for grid popu!--
		
		
		var empStore = Ext.create("Ext.data.Store", {
			model: Ext.define("AttachmentsPopup", {
			extend: "Ext.data.Model",
			fields: ["name", "description", "id"]
		})});
		  
	  
 var myForm = new Ext.form.Panel({
    width: 700,
    height: 200,
    title: '<i class="fa fa-download" role="presentation">&nbsp;Download Attachments</i>',
    floating: true,
    closable : true,
	bodyPadding: 5,
    layout: 'column',
	fieldDefaults: {
        labelAlign: 'left',
        msgTarget: 'side'
    },items: [{
        columnWidth: 200,
        xtype: 'grid',
        store: empStore,
        height: 200,
    //    title:'Files attached to',
	   columns: [
				{   
				    id: 'name',
					header: 'Name',
					dataIndex: 'name',
					width : 200,
				},
				{
				    id: 'description',
					header: 'Description',
					dataIndex: 'description',
					width : 200,
				},
				{
				    id: 'id',
					header: 'Download',
					dataIndex: 'id',
					width : 200,
					renderer: function(value, metaData, record, rowIndex, colIndex, store) {
		             return '<i class="fa fa-download btn btn-sm m-l-xs btn-primary" role="presentation"><b></b></i>'; 
		          },listeners: {
                    click: function(value, metaData, record, rowIndex, colIndex, store) {
			       console.log(store.data);
                 Ext.Ajax.request({
                   url: SailPoint.getRelativeUrl('/rest/attachment/'+store.data.id),
                   success: function(response){
		          if(response.status == 200){
		            var a = document.createElement('a');
                  var blob = new Blob([response.responseText], {'type':"application/octet-stream"});
                 a.href = window.URL.createObjectURL(blob);
                a.download = store.data.name;
                a.click();}},
			     failure: function(response){
			    console.log(response);
			   
			  }, 
      });
         } }
				}
			]
    }]
});

    var grid = new Ext.grid.GridPanel({
      renderTo: griddataab,
	//  collapsible : true,  
	  enableColumnMove:true, 
	  enableColumnResize:true,
	  sortable: true,
      frame: false,
	//  stripeRows: true,
     // title: 'Attachment',
      height: 150,
     // width: 500,
      store: storeatt,
	  
      columns: [{
        header: "Application",
        dataIndex: 'applicationName',
		width: 160,
      },{
        header: "Account Name",
        dataIndex: 'accountName',
		width: 160,
      }, {
        header: "Operation",
        dataIndex: 'operation',
		width: 160,
      },  {
        header: "Value(s)",
        dataIndex: 'value',
		width: 160,
      }, {
        header: "Attachment(s)",
        dataIndex: 'attachments',
		width: 160,
		resizable: false,
		align: 'center',
		renderer: function(value, metaData, record, rowIndex, colIndex, store) {
		 return '<i class="fa fa-paperclip btn btn-sm m-l-xs btn-primary" role="presentation"><b> '+value.length+'</b></i>'; 
		},
		listeners: {
            click: function(value, metaData, record, rowIndex, colIndex, store) {
			console.log(store.data.attachments);
			empStore.loadData(store.data.attachments);
	         myForm.show();
         } }
      }]
    });
    }
});
		
      //--><!]]>
    </script>
  </ui:define>

  <ui:define name="body">
    <f:view>
      <h:messages infoClass="formInfo" warnClass="formWarn" errorClass="formError" fatalClass="formError" />
      <h:form styleClass="form" id="editForm">

          <h:inputHidden id="id" value="#{workItem.object.id}"/>		
         
		  <ui:include src="zzsummaryFieldset.xhtml"/>
          <ui:include src="commentsFieldset.xhtml"/>
		  
		  
		    <div class="spTabledContent" style="margin:5px">
    <table class="spTable" cellspacing="0">
      <tr>
        <th><i class="fa fa-file-text" aria-hidden="true" style="color:#037DA1"></i>&nbsp;
          <h:outputText value="File Attachment Details"/>
        </th>
      </tr>
      <tr>
	 <td>

    
	
	<div id="griddataab" class="width100"></div>
	  
		
		
	 </td>
	 
      </tr>
    </table>
  </div>
		  
		  

          <!-- TODO: the header should be pushed into workflowDetails.xhtml -->
          <div class="spTabledContent" style="margin:5px">
            <table class="spTable" cellspacing="0">
              <tr>
                <th><h:outputText value="#{msgs.details}"/></th>
              </tr>
              <tr>
                <td>
                  <ui:include src="approvalItemsBulkDecisionInclude.xhtml">
                    <ui:param name="disableDecisionColumn" value="true"/>
                    <ui:param name="title" value="#{msgs.lcm_manual_work_item_page_title}"/>
                  </ui:include>
                </td>
              </tr>
            </table>
          </div>
          <br/>
        <div class="buttonRow">
          <h:commandButton style="display: none" id="completeBtn" action="#{workItem.complete}" />

          <ui:fragment rendered="#{workItem.editable}">

          <h:commandButton onclick="checkDisableClick('editForm:completeBtn', true); return false;"
                             value="#{msgs.button_complete}"
                             title="#{msgs.button_title_click_when_finished}"
                             styleClass="primaryBtn"/>

            <h:commandButton action="#{workItem.save}"
                             value="#{msgs.button_save}"
                             title="#{msgs.button_title_click_to_save_work_item}"
                             styleClass="primaryBtn"/>

            <h:commandButton onclick="forwardWorkItem('#{workItem.object.id}', null, SailPoint.NAV_PAGE_HOME, false, SailPoint.getWorkItemPriority()); return false;"
                             value="#{msgs.button_forward}"
                             title="#{msgs.button_title_click_to_forward}"
                             styleClass="primaryBtn"/>

          </ui:fragment>
          <ui:fragment rendered="#{!workItem.editable}">
            <h:commandButton action="#{workItem.save}"
                             value="#{msgs.button_save}"
                             title="#{msgs.button_title_click_to_save_work_item}"
                             styleClass="primaryBtn"/>
          </ui:fragment>

          <h:commandButton action="#{workItem.cancel}"
                           immediate="true"
                           value="#{msgs.button_cancel}"
                           styleClass="secondaryBtn"/>
        </div>
      </h:form>
    </f:view>
  </ui:define>
</ui:composition>

</body>
</html>
